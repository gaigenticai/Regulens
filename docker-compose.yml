# Regulens Production Environment
# Multi-container microservices architecture
# - PostgreSQL & Redis databases
# - Regulatory Monitor Service (main.cpp)
# - API Server (server_with_auth.cpp)
# - Frontend (React/Vite)

services:
  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg15
    container_name: regulens-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-regulens_compliance}
      POSTGRES_USER: ${DB_USER:-regulens_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./seed_data.sql:/docker-entrypoint-initdb.d/02-seed.sql
      - ./backups/postgres:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-regulens_user} -d ${DB_NAME:-regulens_compliance}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - regulens-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: regulens-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./backups/redis:/backups
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-dev_redis_password}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - regulens-network

  # Regulatory Monitor Service (main.cpp)
  regulatory-monitor:
    build:
      context: .
      dockerfile: Dockerfile.regulatory
    container_name: regulens-regulatory-monitor
    ports:
      - "8081:8081"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-regulens_compliance}
      - DB_USER=${DB_USER:-regulens_user}
      - DB_PASSWORD=${DB_PASSWORD:-dev_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev_redis_password}
      - WEB_UI_PORT=8081
      - WEB_UI_HOST=0.0.0.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - regulens-network
    volumes:
      - ./logs:/app/logs

  # API Server (server_with_auth.cpp)
  api-server:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: regulens-api-server
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-regulens_compliance}
      - DB_USER=${DB_USER:-regulens_user}
      - DB_PASSWORD=${DB_PASSWORD:-dev_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev_redis_password}
      - REGULATORY_MONITOR_URL=http://regulatory-monitor:8081
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-CHANGE_THIS_TO_A_STRONG_64_CHARACTER_SECRET_KEY_FOR_PRODUCTION_USE}
      - JWT_EXPIRATION_HOURS=${JWT_EXPIRATION_HOURS:-24}
      - SESSION_EXPIRY_HOURS=${SESSION_EXPIRY_HOURS:-24}
      - CORS_ALLOWED_ORIGIN=${CORS_ALLOWED_ORIGIN:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      regulatory-monitor:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - regulens-network
    volumes:
      - ./logs:/app/logs

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  regulens-network:
    driver: bridge
