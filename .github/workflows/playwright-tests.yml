name: Playwright E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: regulens_compliance
          POSTGRES_USER: regulens_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium firefox webkit

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libpq-dev \
          libpqxx-dev \
          libcurl4-openssl-dev \
          libboost-all-dev \
          nlohmann-json3-dev \
          libspdlog-dev

    - name: Build Regulens application
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: regulens_compliance
        DB_USER: regulens_user
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET_KEY: test_jwt_secret_key_for_ci_testing_32chars_minimum
      run: |
        mkdir -p build
        cd build
        cmake ..
        make -j$(nproc)

    - name: Initialize database schema
      env:
        PGPASSWORD: test_password
      run: |
        psql -h localhost -U regulens_user -d regulens_compliance -f schema.sql
        psql -h localhost -U regulens_user -d regulens_compliance -f seed_data.sql

    - name: Start Regulens application in background
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: regulens_compliance
        DB_USER: regulens_user
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ""
        WEB_SERVER_HOST: 0.0.0.0
        WEB_SERVER_PORT: 8080
        JWT_SECRET_KEY: test_jwt_secret_key_for_ci_testing_32chars_minimum
      run: |
        cd build
        ./regulens &
        echo $! > regulens.pid

    - name: Wait for application to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/api/health; do sleep 2; done'

    - name: Run Playwright tests
      env:
        BASE_URL: http://localhost:8080
        CI: true
      run: npx playwright test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: tests/e2e/reports/
        retention-days: 30

    - name: Upload screenshots on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-screenshots
        path: tests/e2e/screenshots/
        retention-days: 30

    - name: Stop Regulens application
      if: always()
      run: |
        if [ -f build/regulens.pid ]; then
          kill $(cat build/regulens.pid) || true
        fi

    - name: Publish test results summary
      if: always()
      run: |
        if [ -f tests/e2e/reports/results.json ]; then
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat tests/e2e/reports/results.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
