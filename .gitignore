# Regulens Agentic AI Compliance System - Git Ignore Rules
# Production-grade ignore rules for enterprise deployment

# =============================================================================
# BUILD ARTIFACTS (Generated during CI/CD deployment)
# =============================================================================

# CMake build directories
build/
cmake-build-*/
out/
bin/
obj/

# Compiled executables and libraries
regulens
regulens.exe
*.dll
*.so
*.dylib
*.a
*.lib

# CMake generated files
CMakeCache.txt
CMakeFiles/
cmake_install.cmake
install_manifest.txt
compile_commands.json
CTestTestfile.cmake
_deps

# Makefiles generated by CMake
Makefile
*.make

# =============================================================================
# DEVELOPMENT ENVIRONMENT
# =============================================================================

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store
Thumbs.db

# Cursor IDE
.cursor/
.cursorignore

# CLion
cmake-build-*/

# =============================================================================
# DEPENDENCIES AND PACKAGES
# =============================================================================

# Conan package manager
conan/
conanfile.txt
conaninfo.txt
conanbuildinfo.cmake
conanbuildinfo.txt
conan.lock

# vcpkg
vcpkg/
vcpkg_installed/

# External dependencies (should be installed via package manager)
external/
third_party/

# Node.js (if web UI is added later)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Python (if ML components are added)
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/

# =============================================================================
# CONFIGURATION AND SECRETS
# =============================================================================

# Environment files with sensitive data
.env
.env.local
.env.production
.env.staging
.env.development

# SSL certificates and keys
*.pem
*.key
*.crt
*.cer
*.p12
*.pfx

# API keys and secrets
secrets/
config/secrets/
*.secret

# Database files
*.db
*.sqlite
*.sqlite3

# =============================================================================
# LOGS AND TEMPORARY FILES
# =============================================================================

# Application logs
logs/
*.log
log.txt
error.log
access.log

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Core dumps
core
core.*

# =============================================================================
# TESTING AND COVERAGE
# =============================================================================

# Test executables
tests/regulens_tests
tests/regulens_tests.exe

# Coverage reports
coverage/
*.gcda
*.gcno
*.gcov
coverage.info
lcov-report/

# Test artifacts
test_output/
test_results/

# =============================================================================
# DOCUMENTATION BUILD ARTIFACTS
# =============================================================================

# Doxygen generated documentation
docs/html/
docs/latex/
docs/man/
docs/xml/
*.dox

# Sphinx documentation
docs/_build/

# =============================================================================
# OPERATING SYSTEM SPECIFIC
# =============================================================================

# Windows
*.exe
*.dll
*.lib
*.pdb
*.ilk
*.obj
*.pch
*.idb
*.aps
*.ncb
*.suo
*.user
*.tmp
*.temp
*.swp
*.swo
*~

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# =============================================================================
# BACKUPS AND ARCHIVES
# =============================================================================

# Backup files (production safety - no backup files in repository)
*.bak
*.bak2
*.backup
*.backup2
*.old
*.orig
*.rej

# Archive files
*.tar.gz
*.tar.bz2
*.tar.xz
*.zip
*.rar
*.7z

# =============================================================================
# CI/CD AND DEPLOYMENT
# =============================================================================

# CI/CD artifacts
.github/workflows/*.log
artifacts/
dist/
release/

# Docker build context (temporary)
.dockerignore.tmp

# =============================================================================
# SENSITIVE REGULATORY DATA
# =============================================================================

# Sample data that should not be committed
data/samples/
data/test/
compliance_data/
sensitive/

# =============================================================================
# EXCEPTIONS (Files that SHOULD be committed despite patterns above)
# =============================================================================

# Keep example environment file
!.env.example

# Keep example configuration files
!config/*.example
!*.example.*

# Keep documentation templates
!docs/templates/

# Keep test fixtures (non-sensitive)
!tests/fixtures/
!tests/data/

# =============================================================================
# GIT SPECIFIC
# =============================================================================

# Git merge conflict markers
*.orig
*.rej

# Git LFS (if used for large models)
*.lfs

# =============================================================================
# NOTES
# =============================================================================

# IMPORTANT: Build artifacts are intentionally ignored because:
# 1. They are generated during CI/CD deployment
# 2. They are large and change frequently
# 3. They should be built fresh for each deployment
# 4. Including them can cause repository bloat
#
# For deployment:
# - CI/CD systems will build from source
# - Docker containers build during image creation
# - Package managers install from source packages
# - Cloud deployments use build pipelines


